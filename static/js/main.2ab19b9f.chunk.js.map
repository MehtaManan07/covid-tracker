{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","props","data","confirmed","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","style","color","gutterBottom","variant","start","end","value","duration","seperator","Date","lastUpdate","toDateString","recovered","deaths","url","fetchData","country","a","changingUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","fetchedCountries","setFetchedCountries","FormControl","formcontrol","NativeSelect","defaultValue","onChange","event","handleCountryChange","target","i","key","App","state","fetchedData","console","log","setState","this","src","covid","corona","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ab19b9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1Yb1e\",\"card\":\"Cards_card__1Dkdu\",\"infected\":\"Cards_infected__6pxMc\",\"recovered\":\"Cards_recovered__2xtky\",\"deaths\":\"Cards_deaths__1v4XQ\"};","import React from \"react\";\r\nimport { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from 'classnames'\r\n\r\nconst Cards = (props) => {\r\n  if (!props.data.confirmed) {\r\n    return \"Loading\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography style={{color:\"blue\"}} gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h4\">\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.confirmed.value}\r\n                duration={2.3}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(props.data.lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of covid 19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography style={{color:\"#00e676\"}} gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h4\">\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.recovered.value}\r\n                duration={2.7}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(props.data.lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveries from covid 19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"error\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h4\">\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.deaths.value}\r\n                duration={3.1}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(props.data.lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths due to covid 19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changingUrl = url;\r\n\r\n  if(country) {\r\n    changingUrl = `${url}/countries/${country}`\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changingUrl);\r\n    const modifiedData = {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) =>  country.name);\r\n  } catch (error) {}\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = (props/* */) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    fetchAPI();\r\n  },[]);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [{\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true\r\n        }, {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: 'Deaths',\r\n            borderColor: '#d50000',\r\n            backgroundColor: 'rgba(255,0,0,0.5)',\r\n            fill: true\r\n        }],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = (\r\n    props.data.confirmed ? (\r\n      <Bar \r\n      data={{\r\n        labels: ['Infected', 'Recovered', 'Deaths'],\r\n        datasets: [{\r\n          label: 'People',\r\n          backgroundColor: ['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\r\n          data: [props.data.confirmed.value, props.data.recovered.value, props.data.deaths.value]\r\n        }]\r\n      }}\r\n      options={{\r\n        legend: {display: false},\r\n        title: {display: true, text: `Current condition of ${props.country}`}\r\n      }}\r\n       />\r\n    ) : null\r\n  )\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {!props.country ? lineChart : barChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { fetchCountries } from \"../../api\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nconst CountryPicker = (props) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <div>\r\n      <FormControl className={styles.formcontrol}>\r\n        <NativeSelect defaultValue=\"\" onChange={(event) => props.handleCountryChange(event.target.value) }>\r\n          <option value=\"\">Global</option>\r\n          {fetchedCountries.map((country, i) => (\r\n            <option key={i} value={country}>\r\n              {country}\r\n            </option>\r\n          ))}\r\n        </NativeSelect>{\" \"}\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards/Cards\";\nimport Chart from \"./components/Chart/Chart\";\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\nimport covid from './images/image.png'\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country)\n    console.log(fetchedData);\n    this.setState({ data: fetchedData, country: country });\n    //fetch the data and then set the state\n  };\n\n  render() {\n    return (\n      <div className={styles.container}>\n      <img src={covid} className={styles.corona} alt=\"Covid-19\" />\n        <Cards data={this.state.data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart country={this.state.country} data={this.state.data} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1d1jZ\",\"corona\":\"App_corona__2FHtB\",\"image\":\"App_image__3alIu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3dVFY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formcontrol\":\"CountryPicker_formcontrol__2KBfa\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}