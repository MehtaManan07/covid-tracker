{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","App.module.css"],"names":["module","exports","Cards","props","data","confirmed","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","style","color","gutterBottom","variant","start","end","value","duration","seperator","Date","lastUpdate","toDateString","recovered","deaths","url","fetchData","a","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","CountryPicker","App","state","fetchedData","this","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7fee618.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1Yb1e\",\"card\":\"Cards_card__1Dkdu\",\"infected\":\"Cards_infected__6pxMc\",\"recovered\":\"Cards_recovered__2xtky\",\"deaths\":\"Cards_deaths__1v4XQ\"};","import React from \"react\";\r\nimport { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from 'classnames'\r\n\r\nconst Cards = (props) => {\r\n  if (!props.data.confirmed) {\r\n    return \"Loading\";\r\n  }\r\n  // console.log(\"props:\", props);\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography style={{color:\"#00e676\"}} gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h4\">\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.confirmed.value}\r\n                duration={2}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(props.data.lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of covid 19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography style={{color:\"blue\"}} gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h4\">\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.recovered.value}\r\n                duration={2}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(props.data.lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveries from covid 19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"error\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h4\">\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.deaths.value}\r\n                duration={2}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(props.data.lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths due to covid 19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async () => {\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(url);\r\n    const modifiedData = {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`)\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n        // console.log(data)\r\n        return modifiedData\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = (props) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    // console.log('dailyData',dailyData)\r\n    fetchAPI();\r\n  },[]);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [{\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true\r\n        }, {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: 'Deaths',\r\n            borderColor: '#d50000',\r\n            backgroundColor: 'rgba(255,0,0,0.5)',\r\n            fill: true\r\n        }],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from 'react'\r\n\r\nconst CountryPicker = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>CountryPicker</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards/Cards\";\nimport Chart from './components/Chart/Chart'\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\nimport styles from './App.module.css'\nimport { fetchData } from './api'\n\nclass App extends Component {\n  state = {\n    data: {}\n  }\n  async componentDidMount () {\n    const fetchedData = await fetchData()\n    // console.log('fetchedData:',fetchedData)\n    this.setState({data: fetchedData})\n    // console.log('fetchedData:',fetchedData)\n  }\n  render() {\n    return (\n      <div className={styles.container}>\n        <Cards data={this.state.data} />\n        <CountryPicker />\n        <Chart />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3dVFY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1d1jZ\"};"],"sourceRoot":""}